/*
   Tests generated by: ctrl+shft+p go:gen
   Note: Running all the files tests with the "run package tests" lens below
   will include code coverage
*/

// Package stringutil string utility functions
// The text with no line numbers below this comment is called a "lens"
package stringutil

import "testing"

func TestReverse(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "good",
			args: args{
				s: "Good",
			},
			want: "dooG",
		},
		{
			name: "hello",
			args: args{
				s: "Hello, 世界",
			},
			want: "界世 ,olleH",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Reverse(tt.args.s); got != tt.want {
				t.Errorf("Reverse() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestReverseFile(t *testing.T) {
	type args struct {
		filename string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{
			name: "goodfile",
			args: args{
				filename: "../hello.txt",
			},
			want:    "Hello, world",
			wantErr: false,
		},
		{
			name: "badfile",
			args: args{
				filename: "../bad.file",
			},
			want:    "",
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ReverseFile(tt.args.filename)
			if (err != nil) != tt.wantErr {
				t.Errorf("ReverseFile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("ReverseFile() = %v, want %v", got, tt.want)
			}
		})
	}
}
